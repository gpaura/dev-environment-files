# ~/.tmux.conf - Finance/Dev Workflow with macOS Key Support

# ============================================================================
# CORE SETTINGS
# ============================================================================

# Prefix key (Ctrl+A instead of Ctrl+B)
unbind C-b
set-option -g prefix C-q
bind-key C-q send-prefix

# Basic settings
set -g mouse on
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on
set -g history-limit 50000

# CRITICAL FOR FAST KEY RESPONSE
set -s escape-time 0        # No delay for escape key press (was 10)
set -g repeat-time 0        # No repeat time (was 300)
set -g assume-paste-time 0  # Don't wait to detect pasted text

# Terminal settings
set -g default-terminal "screen-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -g set-clipboard on
set -g focus-events on

# Extended keys support for macOS modifiers
set -s extended-keys on
set -as terminal-features 'xterm*:extkeys'
set -g xterm-keys on

# Window monitoring
setw -g monitor-activity on
set -g visual-activity on
set -g bell-action any
set -g visual-bell off
set -g activity-action other

# ============================================================================
# STATUS BAR - GREEN THEME
# ============================================================================

set -g status-interval 1
set -g status-position bottom
set -g status-bg colour235
set -g status-fg colour255

# Left: Session name + window count
set -g status-left-length 40
set -g status-left '#[fg=colour46,bold]󰣇 #S #[fg=colour226]| #[fg=colour46]#{session_windows}w #[fg=colour226]| '

# Right: Current window info
set -g status-right-length 40
set -g status-right '#[fg=colour226]#{window_index}:#{window_name} '

# Window status
setw -g window-status-format ' #I:#W '
setw -g window-status-current-format '#[fg=colour235,bg=colour46,bold] #I:#W '
setw -g window-status-separator ''
setw -g window-status-activity-style fg=colour46,bg=colour235,bold
setw -g window-status-bell-style fg=colour235,bg=colour46,bold

# Message style
set -g message-style bg=colour46,fg=colour235,bold
set -g message-command-style bg=colour235,fg=colour46,bold

# Copy mode style
setw -g mode-style bg=colour46,fg=colour235,bold

# ============================================================================
# PANE BORDERS AND DISPLAY
# ============================================================================

set -g pane-border-lines double
set -g pane-border-indicators colour
set -g pane-border-status off
set -g pane-border-style fg=colour238,bold
set -g pane-active-border-style fg=colour46,bold

# Pane numbers display
set -g display-panes-time 2000
set -g display-panes-colour colour46
set -g display-panes-active-colour colour226

# ============================================================================
# KEY BINDINGS - MACOS MODIFIER KEY FIX
# ============================================================================

# IMPORTANT: Unbind conflicting keys first
unbind -n C-S-Left
unbind -n C-S-Right
unbind -n C-S-Up
unbind -n C-S-Down
unbind -n M-S-Left
unbind -n M-S-Right
unbind -n M-S-Up
unbind -n M-S-Down

# For Command+Arrow and Command+Letter keys, we want NO tmux processing
# Let WezTerm send them directly to the shell as Ctrl sequences

# Only bind the selection keys that need special handling
bind -n C-S-Left send-keys Escape "[1;6D"
bind -n C-S-Right send-keys Escape "[1;6C"
bind -n M-S-Left send-keys Escape "[1;4D"
bind -n M-S-Right send-keys Escape "[1;4C"

# DO NOT bind C-Left, C-Right, or any Command+Letter keys
# Let them pass through directly from WezTerm to shell

# ============================================================================
# WINDOW & PANE MANAGEMENT
# ============================================================================

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Window navigation with Option+Number
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# Quick window switching
bind -n C-M-h previous-window
bind -n C-M-l next-window
bind Tab last-window

# Move windows (without conflicting with text selection)
bind < swap-window -t -1\; select-window -t -1
bind > swap-window -t +1\; select-window -t +1

# Window management
bind N command-prompt -p "Window name:" "new-window -n '%%'"
bind R command-prompt -p "Rename window:" "rename-window '%%'"
bind K confirm-before -p "Kill window #W? (y/n)" kill-window

# ============================================================================
# PANE NAVIGATION - VIM STYLE
# ============================================================================

# Smart pane switching with vim awareness
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

bind-key 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

# Backup pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Option+Arrow for pane switching (using vim keys instead)
bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# DO NOT bind M-Left/Right - let Option+Arrow pass through for word movement

# Pane resizing
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# ============================================================================
# COPY MODE - VI STYLE
# ============================================================================

setw -g mode-keys vi

bind [ copy-mode
bind ] paste-buffer

bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# ============================================================================
# LAYOUTS
# ============================================================================

bind M-1 select-layout even-horizontal
bind M-2 select-layout even-vertical
bind M-3 select-layout main-horizontal
bind M-4 select-layout main-vertical
bind M-5 select-layout tiled

# Finance-specific layouts
bind F1 select-layout main-vertical \; resize-pane -t 1 -x 120
bind F2 select-layout main-horizontal \; resize-pane -t 1 -y 25
bind F3 select-layout tiled

# ============================================================================
# SESSION MANAGEMENT
# ============================================================================

bind X confirm-before -p "Kill session #S? (y/n)" kill-session
bind F choose-tree -s -f '#{?session_attached,,#{session_name}}' 'switch-client -t %%'

# Quick session creators
bind C-t new-session -d -s "trading" \; switch-client -t "trading"
bind C-d new-session -d -s "development" \; switch-client -t "development"
bind C-m new-session -d -s "monitoring" \; switch-client -t "monitoring"

# ============================================================================
# QUICK WINDOW CREATORS
# ============================================================================

bind C-w new-window -n "workspace" -c "~"
bind C-f new-window -n "finance" -c "~/finance"
bind C-n new-window -n "notes" -c "~/notes"
bind C-s new-window -n "server" -c "~"
bind P command-prompt -p "Project name:" "new-window -n '%%' -c '~/dev/%%'"

# ============================================================================
# WINDOW TITLES AND AUTOMATION
# ============================================================================

set -g set-titles on
set -g set-titles-string "tmux:#{session_name}:#{window_name}"
setw -g automatic-rename on
setw -g automatic-rename-format '#{b:pane_current_path}'

# ============================================================================
# UTILITIES
# ============================================================================

# Reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Display pane numbers
bind q display-panes -d 2000

# Highlight active pane
bind m select-pane -P 'fg=black,bg=colour46' \; run-shell 'sleep 0.8' \; select-pane -P 'default'

# Session/window info
bind I display-message -p "Session: #{session_name} | Windows: #{session_windows} | Clients: #{session_many_attached}"
bind W list-windows -F "#{window_index}: #{window_name} (#{pane_current_path})"

# ============================================================================
# LAYOUT SAVE/RESTORE
# ============================================================================

run-shell 'mkdir -p ~/.tmux-layouts'
bind S command-prompt -p "Save layout as:" "run-shell 'tmux list-windows -F \"#{window_index}:#{window_name}:#{window_layout}\" > ~/.tmux-layouts/%%'"
bind L command-prompt -p "Load layout:" "source-file ~/.tmux-layouts/%%"

# ============================================================================
# HOOKS AND NOTIFICATIONS
# ============================================================================

set-hook -g session-created 'display-message -d 3000 "Session ready! C-Space+I=info | C-Space+W=windows | C-Space+N=new window"'
set-hook -g after-select-window 'if -F "#{!=:#{window_name},#{?@last_window_name,#{@last_window_name},}}" "display-message -d 800 \" [Window] → #{window_name}\"; set -g @last_window_name \"#{window_name}\""'

# Auto-rename windows after creation
set-hook -g after-new-window 'if -F "#{==:#{window_name},bash}" "rename-window \"#{b:pane_current_path}\""'
set-hook -g after-new-window 'if -F "#{==:#{window_name},zsh}" "rename-window \"#{b:pane_current_path}\""'

# Startup message
display-message "tmux #{version} | Session: #{session_name} | macOS keys configured!"